<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd">


	<bean id="bridgePropertyPlaceholder"
		class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
		<property name="location" value="file:conf/snmpcg.properties" />
	</bean>

	<bean id="Sources" class="org.openfs.snmpcg.SourceInventory"
		init-method="getRecoveryState">
		<property name="community" value="${snmp.community}" />
		<property name="timeout" value="${snmp.timeout}" />
		<property name="retries" value="${snmp.retries}" />
		<property name="recoveryFileName" value="conf/recovery_router.dat" />
	</bean>

	<bean id="Counters" class="org.openfs.snmpcg.SourceCounters"
		init-method="getRecoveryState">
		<property name="dateTimeFormat" value="${TimeStampFormat}" />
		<property name="logFields" value="${log.fields}" />
		<property name="cdrFields" value="${cdr.fields}" />
		<property name="recoveryFileName" value="conf/recovery_cache.dat" />
	</bean>

	<bean id="SNMPUtils" class="org.openfs.snmpcg.SnmpServiceWrapper" />
	<bean id="ValidateAggregator" class="org.openfs.snmpcg.aggregator.SourceAggregationStrategy" />
	<!-- bean id="PollAggregator" class="org.openfs.snmpcg.aggregator.PollAggregationStrategy" / -->
	<bean id="PollAggregator" class="org.openfs.snmpcg.aggregator.PollDataAggregationStrategy" />
	<bean id="DeltaAggregator" class="org.openfs.snmpcg.aggregator.DeltaListAggregationStrategy" />
	<!--  bean id="DeltaAggregator" class="org.openfs.snmpcg.aggregator.DeltaAggregationStrategy" / -->

	<bean id="quartz2" class="org.apache.camel.component.quartz2.QuartzComponent">
		<property name="propertiesFile" value="quartz.properties" />
	</bean>

	<bean id="staticHandler" class="org.eclipse.jetty.server.handler.ResourceHandler">
		<property name="directoriesListed" value="false" />
		<property name="welcomeFiles">
			<list>
				<value>index.html</value>
			</list>
		</property>
		<property name="resourceBase" value="web" />
	</bean>


	<camelContext id="RestService" xmlns="http://camel.apache.org/schema/spring">
        
		<restConfiguration bindingMode="json" component="jetty" host="0.0.0.0" enableCORS="true" port="{{httpPort}}"/>

		<rest path="/api/">
			<get uri="/sources/" id="listSources">
				<!-- get all sources or modified by query: (?up:down:size) as (CamelHttpQuery) -->
				<to uri="direct:sources" />
			</get>
			<!-- get source ip detail -->
			<get uri="/sources/{source}">
				<to uri="direct:sourceStatus" />
			</get>
			<post uri="/sources/{source}">
				<to uri="direct:sourceAdd" />
			</post>
			<get uri="/sources/del/{source}">
				<to uri="direct:sourceDel" />
			</get>
			<delete uri="/sources/{source}">
				<to uri="direct:sourceDel" />
			</delete>
			<!-- counters cache API -->
			<get uri="/counters/">
				<!-- get all cache or modified by query: (?size) as (CamelHttpQuery) -->
				<to uri="direct:getCounters" />
			</get>
			<get uri="/counters/{ip}">
				<to uri="direct:getIpCounter" />
			</get>
		</rest>

		<route id="serivceStatic">
			<from uri="jetty:http://0.0.0.0:{{httpPort}}?handlers=#staticHandler" />
			<to uri="mock:fake?retainFirst=1" />
		</route>

		<route id="restGetSources">
			<from uri="direct:sources" />
			<bean ref="Sources" method="restGetSources" />
		</route>

		<route id="restGetSource">
			<from uri="direct:sourceStatus" />
			<bean ref="Sources" method="restGetSource" />
		</route>

		<route id="restSourceAdd">
			<from uri="direct:sourceAdd" />
			<bean ref="Sources" method="restAddSource" />
			<log message="REST: ${body}" />
		</route>

		<route id="restSourceDel">
			<from uri="direct:sourceDel" />
			<bean ref="Sources" method="restDelSource" />
			<bean ref="Counters" method="restClearIpCache" />
			<log message="REST: ${body}" />
		</route>

		<route id="restGetCounters">
			<from uri="direct:getCounters" />
			<bean ref="Counters" method="restGetCache" />
		</route>

		<route id="restGetIpCounter">
			<from uri="direct:getIpCounter" />
			<bean ref="Counters" method="restGetIpCache" />
		</route>
	</camelContext>

	<camelContext id="SnmpCG" xmlns="http://camel.apache.org/schema/spring">

		<threadPoolProfile id="pollCounterProfile" poolSize="{{poll.Threads}}"
			maxPoolSize="{{poll.maxThreads}}" maxQueueSize="-1" />

<!--  
		<route id="initSrcData">
			<from uri="file:in?maxMessagesPerPoll=1&amp;delay=30000" />
			<convertBodyTo type="java.lang.String" />
			<bean ref="Sources" method="initSrcData" />
			<log
				message="parsed (${header.CamelSnmpListSize}) sources from (${header.CamelFileName})" />
			<to uri="file:log?fileName=parsed_${date:now:yyyyMMddHHmmss}.log" />
			<log message="flush processed log to: ${header.CamelFileNameProduced}" />
			<log message="start validate (${header.CamelSnmpListSize}) sources" />
			<to uri="direct:validate" />
		</route>
 -->
 
		<route id="validateSources">
			<from uri="timer://validate?period={{validate.period}}" />
			<bean ref="Sources" method="getDownSources" />
			<filter>
				<method ref="Sources" method="isEmptySourceList" />
				<log message="skip validate. all source is up" />
				<stop />
			</filter>
			<split strategyRef="ValidateAggregator" parallelProcessing="true">
				<simple>${header.CamelSnmpSources}</simple>
				<bean ref="SNMPUtils" method="getSnmpStatus" />
				<bean ref="Sources" method="validateSnmpStatus" />
				<log message="${routeId}: ${header.CamelSnmpSource} is ${header.CamelSnmpSourceStatus}" />
			</split>
			<log message="${routeId}: total up:${header.CamelSnmpUpCounter} down:${header.CamelSnmpDownCounter}" />
			<bean ref="Sources" method="logValidate" />
		</route>

		<route id="snmpPoll">
			<from uri="quartz2://snmp/poll?cron=0+0/5+*+*+*+?" />
			<bean ref="Sources" method="getUpSources" />
			<filter>
				<method ref="Sources" method="isEmptySourceList" />
				<log message="is all sources down?" loggingLevel="WARN" />
				<stop />
			</filter>
			<log message="${routeId}: start (${header.CamelSnmpListSize}) sources" />
			<split parallelProcessing="true" strategyRef="PollAggregator"
				executorServiceRef="pollCounterProfile" parallelAggregate="true">
				<simple>${header.CamelSnmpSources}</simple>
				<bean ref="SNMPUtils" method="getSnmpCounters" />
				<log message="${routeId}: ${header.CamelSnmpSource} uptime:${header.CamelSnmpUptime} status:${header.CamelSnmpSourceStatus} counters:${header.CamelSnmpListSize}" />
				<bean ref="Sources" method="validateSnmpStatus" />
			</split>
			<log message="${routeId}: end" />
			<multicast>
				<to uri="direct:logCounters" />
				<to uri="direct:processCounters" />
			</multicast>
		</route>
  
  
  <route id="logPoll">
  	<from uri="direct:logCounters"/>
  	<split>
  		<simple>${body}</simple>
  		<split>
  			<simple>${body}</simple>
  			<setBody><simple>${body.getIpAddress()},${body.getSnmpDescr()},${body.getSnmpIn().getValue()},${body.getSnmpOut().getValue()},${body.getPollTime()}\n</simple></setBody>
  			<to uri="file:out/counter?fileName=${date:now:yyyyMMddHHmm00}.txt&amp;fileExist=Append" />
  		</split>
  	</split>
  </route>
  
  <!-- 
		<route id="logPoll">
			<from uri="direct:logCounters" />
			<bean ref="Counters" method="logListCounters" />
			<marshal>
				<csv delimiter="{{delimiter}}" />
			</marshal>
			<marshal>
				<gzip />
			</marshal>
			<to uri="file:out/counter?fileName=${date:now:yyyyMMddHHmmss}.txt.gz" />
			<log message="flush counters to: ${headers.CamelFileNameProduced}" />
		</route>
  -->
  
		<route id="deltaPoll">
			<from uri="direct:processCounters" />
			<split strategyRef="DeltaAggregator">
				<simple>${body}</simple>
				<bean ref="Counters" method="processListDelta" />
			</split>
			<bean ref="Counters" method="logListDelta" />
			<marshal>
				<csv delimiter="{{delimiter}}" />
			</marshal>
			<choice>
				<when>
					<simple>'{{cdr.compress}}' == 'gzip'</simple>
					<marshal>
						<gzip />
					</marshal>
					<to uri="file:out/cdr?fileName=${date:now:yyyyMMddHHmmss}.snmp.dat.gz" />
				</when>
				<otherwise>
					<to uri="file:out/cdr?fileName=${date:now:yyyyMMddHHmmss}.snmp.dat" />
				</otherwise>
			</choice>
			<log message="flush delta records to: ${headers.CamelFileNameProduced}" />
		</route>
 
 
	</camelContext>
</beans>
          
          